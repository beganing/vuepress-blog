import{_ as t,r as l,o as c,c as r,d as n,e,f as a,b as o}from"./app-zVI8MIRp.js";const d={},p=o('<ul><li><code>SELECT</code>，返回对查询的响应中的行</li><li><code>INSERT</code>，向表中添加新行</li><li><code>UPDATE</code>，修改表中现有的行</li><li><code>DELETE</code>，从表中删除行</li></ul><h2 id="_3-1-函数列表" tabindex="-1"><a class="header-anchor" href="#_3-1-函数列表" aria-hidden="true">#</a> 3.1. 函数列表</h2>',2),i=n("thead",null,[n("tr",null,[n("th",null,"函数名"),n("th",null,"类型"),n("th",null,"返回值")])],-1),u={href:"http://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE",target:"_blank",rel:"noopener noreferrer"},k=n("td",null,"PostgreSQL聚合函数",-1),h=n("td",null,"返回数值列的平均值",-1),_={href:"http://www.postgresql.org/docs/current/static/functions-string.html",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"PostgreSQL字符串函数",-1),m=n("td",null,"返回字符串中的字符数",-1),v={href:"http://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-AGGREGATE-STATISTICS-TABLE",target:"_blank",rel:"noopener noreferrer"},b=n("td",null,"PostgreSQL聚合函数",-1),E=n("td",null,"返回输入值的标准差",-1),q={href:"http://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE",target:"_blank",rel:"noopener noreferrer"},w=n("td",null,"PostgreSQL聚合函数",-1),f=n("td",null,"返回一组记录中记录数量",-1),T={href:"http://www.postgresql.org/docs/current/static/functions-aggregate.html#FUNCTIONS-AGGREGATE-TABLE",target:"_blank",rel:"noopener noreferrer"},y=n("td",null,"PostgreSQL 聚合函数",-1),S=n("td",null,"返回一组记录中的记录总和",-1),L=o(`<h2 id="_3-2-select" tabindex="-1"><a class="header-anchor" href="#_3-2-select" aria-hidden="true">#</a> 3.2. SELECT</h2><blockquote><p>查询</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> some_columns <span class="token keyword">FROM</span> some_data_source <span class="token keyword">WHERE</span> some_condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>some_columns</code> 可以是列名或列值的函数。 <code>some_data_source</code> 可以是单个表，也可以是通过在关键列上或根据条件连接两个表创建的复合表。 <code>some_condition</code> 是一个过滤器，用于限制要返回的行数。</p><blockquote><p>示例-布鲁克林的所有社区的名称是什么？</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name 
  <span class="token keyword">FROM</span> nyc_neighborhoods
  <span class="token keyword">WHERE</span> boroname <span class="token operator">=</span> <span class="token string">&#39;Brooklyn&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>字符串长度函数-<code>char_length()</code></p><p>示例-布鲁克林所有社区的名称中有多少个字母？</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> char_length<span class="token punctuation">(</span>name<span class="token punctuation">)</span> 
  <span class="token keyword">FROM</span> nyc_neighborhoods
  <span class="token keyword">WHERE</span> boroname <span class="token operator">=</span> <span class="token string">&#39;Brooklyn&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>聚合函数</p><ul><li>计算平均值的通用函数:command:<code>avg()</code></li><li>计算标准差的函数:command:<code>stddev()</code></li></ul></blockquote><blockquote><p>示例-布鲁克林所有社区名称中字母的平均数量和标准偏差是多少？</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">avg</span><span class="token punctuation">(</span>char_length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stddev<span class="token punctuation">(</span>char_length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> nyc_neighborhoods
  <span class="token keyword">WHERE</span> boroname <span class="token operator">=</span> <span class="token string">&#39;Brooklyn&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>分组-<code>GROUP BY</code></p><p>在输出结果中包含了<code>boroname</code>列，这样我们就可以确定哪个统计数据适用于哪个<code>boroname</code></p><p>示例-纽约市所有社区名称的平均字母数，按行政区划报告？</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> boroname<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>char_length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stddev<span class="token punctuation">(</span>char_length<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> nyc_neighborhoods
  <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> boroname<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function x(G,R){const s=l("ExternalLinkIcon");return c(),r("div",null,[p,n("table",null,[i,n("tbody",null,[n("tr",null,[n("td",null,[n("a",u,[e("avg(expression)"),a(s)])]),k,h]),n("tr",null,[n("td",null,[n("a",_,[e("char_length(string)"),a(s)])]),g,m]),n("tr",null,[n("td",null,[n("a",v,[e("stddev(expression)"),a(s)])]),b,E]),n("tr",null,[n("td",null,[n("a",q,[e("count(expression)"),a(s)])]),w,f]),n("tr",null,[n("td",null,[n("a",T,[e("sum(expression)"),a(s)])]),y,S])])]),L])}const C=t(d,[["render",x],["__file","PostGIS-3.html.vue"]]);export{C as default};
