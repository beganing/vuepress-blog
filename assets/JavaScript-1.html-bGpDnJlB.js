import{_ as n,o as s,c as a,b as t}from"./app-zVI8MIRp.js";const p="/vuepress-blog/assets/image1-chfOKPUp.png",e={},o=t(`<h2 id="_1-解析-html" tabindex="-1"><a class="header-anchor" href="#_1-解析-html" aria-hidden="true">#</a> 1. 解析 <em>HTML</em></h2><p>浏览器从本地文件或者网络中获取到 <em>HTML</em> 源代码，从上到下依次解析源代码。</p><p>若解析过程中，遇到 <em>css</em>、<em>js</em> 文件会<strong>暂停解析（阻塞）</strong>，转而等待 <em>css</em>、<em>js</em> 文件请求完成、解析完成。之后，继续解析 <em>HTML</em> 文件。</p><p>遇到 <em>img</em>、<em>video</em>、<em>audio</em> 文件，<strong>不会暂停解析</strong>。</p><ul><li>读取 <em>HTML</em></li><li>解析 <em>HTML</em></li><li>读取 <em>css</em></li><li>解析 <em>css</em></li><li>解析 <em>HTML</em></li><li>读取 <em>js</em></li><li>执行 <em>js</em></li><li>解析 <em>HTML</em></li></ul><p>一般情况下，将 <em>css</em> 引入写在页面开头，<em>js</em> 文件写在页面最后</p><ul><li>将 <em>css</em> 写在前面，可以让浏览器尽快读取并解析样式，避免用户看到原生的页面，也可以避免页面闪烁（原生样式-&gt;自定义样式）</li><li>将 <em>js</em> 写在最后，可以让页面尽快呈现给用户，然后再执行 <em>js</em> 完成交互功能；当 <em>HTML</em> 未解析完成时，提前用 <em>js</em> 获取不到 <em>dom</em></li></ul><h2 id="_2-生成-dom-树" tabindex="-1"><a class="header-anchor" href="#_2-生成-dom-树" aria-hidden="true">#</a> 2. 生成 <em>DOM</em> 树</h2><p>浏览器会一边解析 <em>HTML</em>，一边生成 <em>DOM</em> 树，是同步进行的。我们使用 <em>js</em> 获取到的 <em>DOM</em> 就是 <em>DOM</em> 树中的 <em>DOM</em>。</p><ul><li>document <ul><li>html <ul><li>head <ul><li>meta</li><li>title</li><li>link</li></ul></li><li>body <ul><li>h1</li><li>p <ul><li>Hello World!</li></ul></li></ul></li></ul></li></ul></li></ul><p>当 <em>DOM</em> 树完全生成好之后，会触发 <code>DOMContentLoaded</code> 事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;h1&gt;hello world!&lt;/h1&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当页面中所有外部资源全部加载完毕，会触发 <code>load</code> 事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;h1&gt;hello world!&lt;/h1&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>load</code> 事件可以针对单个外部资源使用，资源加载完成后触发。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;img1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
img1<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;img1加载完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综合示例：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DOMContentLoaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第2个打印&#39;</span><span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;h1&gt;hello world!&lt;/h1&gt;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第1个打印&#39;</span><span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>

      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;load&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第3个打印&#39;</span><span class="token punctuation">,</span> dom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;h1&gt;hello world!&lt;/h1&gt;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img1<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.7wlJ_w0I_qj8VWG2KumLPwHaFj&amp;w=167&amp;h=185&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.5&amp;pid=3.1&amp;rm=2<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
      <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img2<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.BZrfHwh4FggNFwwEbAGFsAHaK3&amp;w=120&amp;h=185&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.5&amp;pid=3.1&amp;rm=2<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token keyword">const</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;img1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      img1<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;img1加载完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果：</p><p><img src="`+p+`" alt="打印结果"></p><h2 id="_3-生成渲染树" tabindex="-1"><a class="header-anchor" href="#_3-生成渲染树" aria-hidden="true">#</a> 3. 生成渲染树</h2><p>浏览器一边生成 <em>DOM</em> 树，一边计算 <em>DOM</em> 树中每个节点的样式规则，最终形成渲染树。</p><p><em>CSS</em> 属性的计算过程，发生在这一步骤。</p><h2 id="_4-布局-layout-重排-reflow" tabindex="-1"><a class="header-anchor" href="#_4-布局-layout-重排-reflow" aria-hidden="true">#</a> 4. 布局 <em>layout</em> / 重排 <em>reflow</em></h2><p>这个步骤称之为 <strong><em>reflow</em>（回流、重排）</strong>，是指浏览器一边生成渲染树，一边计算每个元素最终的尺寸和位置。</p><p>完成后，页面中的所有元素的位置和尺寸就确定下来了，即将被渲染到页面。</p><p>这个步骤会在页面之后的运行过程中不断地重复，<strong>下面的 <em>js</em> 操作均会导致 <em>reflow</em></strong>：</p><ul><li>获取元素的尺寸和位置 <ul><li><em>reflow</em> 非常耗时，浏览器为了提升性能，对 <em>js</em> 中连续导致 <em>reflow</em> 的代码，将 <em>reflow</em> 的时间点延迟到结束后进行，<strong>但在此过程中，如果遇到了获取尺寸和位置的代码，浏览器会迫不得已立即 <em>reflow</em></strong>。</li></ul></li><li>直接或间接改变元素的尺寸和位置 <ul><li>直接改变：就是直接设置宽高，或者设置 <em>position</em> 的偏移值。</li><li>间接改变：例如改变 <em>img</em> 的 <em>src</em> 值，因不同图片的大小可能不一致，从而导致 <em>reflow</em>；改变字体大小，从而间接导致 <em>dom</em> 元素宽高变化，导致 <em>reflow</em>。</li></ul></li></ul><blockquote><p>示例 1：正常修改 <em>dom</em> 的尺寸和位置</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码对应的 <em>reflow</em> 过程：</p><ol><li>改变宽度</li><li>改变高度</li><li>改变横坐标</li><li>改变纵坐标</li><li><em>reflow</em></li></ol><p>将上面会连续导致 <em>reflow</em> 的代码，依次连续处理，最后统一 <em>reflow</em>，这是浏览器对 <em>reflow</em> 耗时而进行的优化。</p><blockquote><p>示例 2：获取元素尺寸和位置</p></blockquote><p>此时，如果在其中添加一个获取元素尺寸或位置的代码，则会强制出现 <em>reflow</em>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;200px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span> <span class="token comment">// 读取高度，导致强行 reflow</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span>
dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;20px&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码对应的 <em>reflow</em> 过程：</p><ol><li>改变宽度</li><li>改变高度</li><li>读取高度</li><li><em>reflow</em></li><li>改变横坐标</li><li>改变纵坐标</li><li><em>reflow</em></li></ol><p>遇到获取元素尺寸或位置的代码，会强制 <em>reflow</em>，因为这样才能获取到最新的尺寸或位置数据。</p><h2 id="_5-重绘-repaint" tabindex="-1"><a class="header-anchor" href="#_5-重绘-repaint" aria-hidden="true">#</a> 5. 重绘 <em>repaint</em></h2><p>浏览器一边 <em>reflow</em>，一边进行生成对应的图形绘制到页面，绘制的过程称之为 <em>repaint</em>。</p><p><strong>所有会导致 <em>reflow</em> 的代码，均会导致 <em>repaint</em>。</strong></p><p>绘制的过程是靠 <strong><em>GPU</em></strong> 完成的，速度非常快，因此，<strong>相对于导致 <em>reflow</em> 的代码，仅会导致 <em>repaint</em> 的代码效率会高出很多</strong>。</p><p>凡是不会影响盒子排列，仅影响盒子外观的代码都不会导致 <em>reflow</em>，仅导致 <em>repaint</em>，例如：</p><ul><li>改变背景颜色</li><li>改变字体颜色</li><li>圆角边框</li><li>背景图</li><li>...</li></ul>`,45),l=[o];function c(i,u){return s(),a("div",null,l)}const m=n(e,[["render",c],["__file","JavaScript-1.html.vue"]]);export{m as default};
