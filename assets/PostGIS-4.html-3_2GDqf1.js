import{_ as o,r as l,o as r,c as p,d as n,e as s,f as t,b as a}from"./app-zVI8MIRp.js";const i="/vuepress-blog/assets/image1-9jBt7eLp.png",c="/vuepress-blog/assets/image2-UGX-Pzpg.png",u="/vuepress-blog/assets/image3--IGOfxGt.png",d="/vuepress-blog/assets/image4-voYvwic-.png",g="/vuepress-blog/assets/image5-PpPK3Gxz.png",m="/vuepress-blog/assets/image6-W5g2SSg6.png",_="/vuepress-blog/assets/image7-RYC9Mctd.png",k="/vuepress-blog/assets/image8-RiHMwUm7.png",h="/vuepress-blog/assets/image9-kiuHiIMQ.png",S="/vuepress-blog/assets/image10-ZuJQFvWl.png",T="/vuepress-blog/assets/image11-7gpzob9D.png",b={},v=a(`<h2 id="_4-1-介绍" tabindex="-1"><a class="header-anchor" href="#_4-1-介绍" aria-hidden="true">#</a> 4.1. 介绍</h2><p>执行如下<code>sql</code>语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> geometries <span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">,</span> geom <span class="token keyword">geometry</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> geometries <span class="token keyword">VALUES</span>
  <span class="token punctuation">(</span><span class="token string">&#39;Point&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POINT(0 0)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;Linestring&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;LINESTRING(0 0, 1 1, 2 1, 2 2)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;Polygon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;PolygonWithHole&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(1 1, 1 2, 2 2, 2 1, 1 1))&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token string">&#39;Collection&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GEOMETRYCOLLECTION(POINT(2 0),POLYGON((0 0, 1 0, 1 1, 0 1, 0 0)))&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ST_AsText<span class="token punctuation">(</span>geom<span class="token punctuation">)</span> <span class="token keyword">FROM</span> geometries<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>执行结果</p></blockquote><p><img src="`+i+'" alt="alt text"></p><p>上面的示例 SQL 代码创建了一个名为 <strong>geometries</strong> 的数据表，插入了 5 个几何对象：1 点，1 线，1 多边形，1 带洞多边形，1 集合。最后，使用 SELECT 语句把插入的数据选出来并输出到面板上。</p><h2 id="_4-2-元数据表" tabindex="-1"><a class="header-anchor" href="#_4-2-元数据表" aria-hidden="true">#</a> 4.2. 元数据表</h2>',7),y={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-SFSQL",target:"_blank",rel:"noopener noreferrer"},L=a('<ul><li>第一个表是<code>spatial_ref_sys</code>，它定义了数据库中已知的所有空间参考系统，并将在后面更详细地描述。</li><li>第二个表（实际上是一个视图）是<code>geometry_columns</code>，它提供了所有“要素”（定义为具有几何属性的对象）的列表，以及这些要素的基本详细信息。</li></ul><p><img src="'+c+`" alt="alt text"></p><p>查看数据库中的<code>geometry_columns</code>表</p><blockquote><p>执行查询</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> geometry_columns<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>返回结果</p></blockquote><p><img src="`+u+'" alt="alt text"></p><ul><li><code>f_table_catalog</code>、<code>f_table_schema</code>和<code>f_table_name</code>提供了包含给定几何图形的要素表的完全限定名称。因为PostgreSQL不使用目录，所以<code>f_table_catalog</code>通常为空。</li><li><code>f_geometry_column</code>是包含几何图形的列的名称——对于具有多个几何列的要素表，每个列将有一条记录。</li><li><code>coord_dimension</code>和<code>srid</code>分别定义了几何图形的维度（2、3或4维）和引用<code>spatial_ref_sys</code>表的空间参考系统标识符。</li><li><code>type</code>列定义了下面描述的几何类型；到目前为止，我们已经看到了Point和Linestring类型。</li></ul><p>通过查询此表，<code>GIS</code>客户端和库可以确定在检索数据时可以期望什么，并且可以执行任何必要的投影、处理或渲染，而无需检查每个几何图形。</p><h2 id="_4-3-表示真实世界的对象" tabindex="-1"><a class="header-anchor" href="#_4-3-表示真实世界的对象" aria-hidden="true">#</a> 4.3. 表示真实世界的对象</h2>',10),f={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-SFSQL",target:"_blank",rel:"noopener noreferrer"},G={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-SQL-MM",target:"_blank",rel:"noopener noreferrer"},E=a(`<blockquote><p>使用读取几何元数据的函数, 收集每个对象的一般信息</p></blockquote><ul><li><strong>ST_GeometryType(geometry)</strong> 返回几何图形的类型</li><li><strong>ST_NDims(geometry)</strong> 返回几何图形的维数</li><li><strong>ST_SRID(geometry)</strong> 返回几何图形的空间参考标识号</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ST_GeometryType<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_NDims<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_SRID<span class="token punctuation">(</span>geom<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> geometries<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="alt text"></p><h3 id="_4-3-1-点" tabindex="-1"><a class="header-anchor" href="#_4-3-1-点" aria-hidden="true">#</a> 4.3.1. 点</h3><p>空间点表示地球上的一个位置。这个点由一个坐标表示（包括2、3或4个维度）。当在目标比例尺下，确切的细节，例如形状和大小，不重要时，通常使用点来表示对象。例如，在世界地图上，城市可以表示为点，而在单个州的地图上，城市可以表示为多边形。</p><blockquote><p>用于处理<strong>点</strong>的特定空间函数</p></blockquote><ul><li><strong>ST_X(geometry)</strong> 返回X坐标</li><li><strong>ST_Y(geometry)</strong> 返回Y坐标</li></ul><p>所以可以读取一个点的坐标</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ST_X<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_Y<span class="token punctuation">(</span>geom<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> geometries
  <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Point&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+`" alt="alt text"></p><h3 id="_4-3-2-线段" tabindex="-1"><a class="header-anchor" href="#_4-3-2-线段" aria-hidden="true">#</a> 4.3.2. 线段</h3><p><strong>Linestring*<em>是两个或多个位置之间的路径。它采用两个或多个点的有序系列的形式。道路和河流通常被表示为linestrings。如果Linestring从同一点开始和结束，则称其为*<em>closed</em></em>。如果Linestring不穿过或触及自身（如果它是封闭的，则除了在其端点处），则称其为</strong>simple**。Linestring可以同时是<strong>closed</strong>和<strong>simple</strong>。</p><blockquote><p>用于处理<strong>线段</strong>的特定空间函数</p></blockquote><ul><li><strong>ST_Length(geometry)</strong> 返回Linestring的长度</li><li><strong>ST_StartPoint(geometry)</strong> 返回第一个坐标作为一个点</li><li><strong>ST_EndPoint(geometry)</strong> 返回最后一个坐标作为一个点</li><li><strong>ST_NPoints(geometry)</strong> 返回Linestring中坐标的数量</li></ul><p>所以可以获取Linestring的一些信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ST_Length<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span>ST_StartPoint<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_EndPoint<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_NPoints<span class="token punctuation">(</span>geom<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> geometries
  <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Linestring&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt="alt text"></p><h3 id="_4-3-3-多边形" tabindex="-1"><a class="header-anchor" href="#_4-3-3-多边形" aria-hidden="true">#</a> 4.3.3. 多边形</h3><p>多边形是一个区域的表示。多边形的外边界由一个环表示。这个环是一个根据上面定义的封闭和简单的Linestring。多边形内的孔也由环表示。</p><blockquote><p>用于处理<strong>多边形</strong>的特定空间函数</p></blockquote><ul><li><strong>ST_Area(geometry)</strong> 返回多边形的面积</li><li><strong>ST_NRings(geometry)</strong> 返回环的数量（通常为1，如果有孔则更多）</li><li><strong>ST_ExteriorRing(geometry)</strong> 返回外环作为一个Linestring</li><li><strong>ST_InteriorRingN(geometry,n)</strong> 返回指定的内部环作为一个Linestring</li><li><strong>ST_Perimeter(geometry)</strong> 返回所有环的长度</li></ul><p>可以获取多边形的一些信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ST_Area<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_NRings<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_ExteriorRing<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_InteriorRingN<span class="token punctuation">(</span>geom<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ST_Perimeter<span class="token punctuation">(</span>geom<span class="token punctuation">)</span>
  <span class="token keyword">FROM</span> geometries
  <span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;Polygon%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+`" alt="alt text"></p><h3 id="_4-3-4-集合" tabindex="-1"><a class="header-anchor" href="#_4-3-4-集合" aria-hidden="true">#</a> 4.3.4. 集合</h3><p>有四种集合类型，它们将多个简单几何图形分组成集合。</p><ul><li><strong>MultiPoint</strong>，一组点</li><li><strong>MultiLineString</strong>，一组线串</li><li><strong>MultiPolygon</strong>，一组多边形</li><li><strong>GeometryCollection</strong>，任何几何图形的异构集合（包括其他集合）</li></ul><p>集合是在GIS软件中出现的另一个概念，而不是在通用图形软件中。它们对于直接建模实际世界对象作为空间对象非常有用。</p><blockquote><p>用于处理<strong>集合</strong>的特定空间函数</p></blockquote><ul><li><strong>ST_NumGeometries(geometry)</strong> 返回集合中的部分数量</li><li><strong>ST_GeometryN(geometry,n)</strong> 返回指定的部分</li><li><strong>ST_Area(geometry)</strong> 返回所有多边形部分的总面积</li><li><strong>ST_Length(geometry)</strong> 返回所有线性部分的总长度</li></ul><p>获取集合的一些信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> ST_AsText<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_NumGeometries<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_GeometryN<span class="token punctuation">(</span>geom<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ST_Area<span class="token punctuation">(</span>geom<span class="token punctuation">)</span><span class="token punctuation">,</span> ST_Length<span class="token punctuation">(</span>geom<span class="token punctuation">)</span> 
  <span class="token keyword">FROM</span> geometries
  <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">&#39;Collection&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt="alt text"></p><h2 id="_4-4-几何的输入输出" tabindex="-1"><a class="header-anchor" href="#_4-4-几何的输入输出" aria-hidden="true">#</a> 4.4. 几何的输入输出</h2><p>在数据库中，几何图形以一种仅由PostGIS程序使用的格式存储在磁盘上。为了让外部程序插入和检索有用的几何图形，它们需要转换成其他应用程序能够理解的格式。幸运的是，PostGIS支持在大量格式中输入和输出几何图形:</p>',36),x={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-WKT",target:"_blank",rel:"noopener noreferrer"},I=n("ul",null,[n("li",null,[n("strong",null,"ST_GeomFromText(text, srid)"),s(" 返回 "),n("code",null,"geometry")]),n("li",null,[n("strong",null,"ST_AsText(geometry)"),s(" 返回 "),n("code",null,"text")]),n("li",null,[n("strong",null,"ST_AsEWKT(geometry)"),s(" 返回 "),n("code",null,"text")])],-1),N={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-WKB",target:"_blank",rel:"noopener noreferrer"},q=n("ul",null,[n("li",null,[n("strong",null,"ST_GeomFromWKB(bytea)"),s(" 返回 "),n("code",null,"geometry")]),n("li",null,[n("strong",null,"ST_AsBinary(geometry)"),s(" 返回 "),n("code",null,"bytea")]),n("li",null,[n("strong",null,"ST_AsEWKB(geometry)"),s(" 返回 "),n("code",null,"bytea")])],-1),w={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-GML",target:"_blank",rel:"noopener noreferrer"},P=n("ul",null,[n("li",null,[n("strong",null,"ST_GeomFromGML(text)"),s(" 返回 "),n("code",null,"geometry")]),n("li",null,[n("strong",null,"ST_AsGML(geometry)"),s(" 返回 "),n("code",null,"text")])],-1),K={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-KML",target:"_blank",rel:"noopener noreferrer"},M=n("ul",null,[n("li",null,[n("strong",null,"ST_GeomFromKML(text)"),s(" 返回 "),n("code",null,"geometry")]),n("li",null,[n("strong",null,"ST_AsKML(geometry)"),s(" 返回 "),n("code",null,"text")])],-1),R={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-GeoJSON",target:"_blank",rel:"noopener noreferrer"},W=n("ul",null,[n("li",null,[n("strong",null,"ST_AsGeoJSON(geometry)"),s(" 返回 "),n("code",null,"text")])],-1),O={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-SVG",target:"_blank",rel:"noopener noreferrer"},A=n("ul",null,[n("li",null,[n("strong",null,"ST_AsSVG(geometry)"),s(" 返回 "),n("code",null,"text")])],-1),F=n("p",null,"构造函数最常见的用途是将几何图形的文本表示转换为内部表示:",-1),C={href:"https://postgis.net/workshops/zh_Hans/postgis-intro/glossary.html#term-SRID",target:"_blank",rel:"noopener noreferrer"},B=a('<blockquote><p>示例:</p><p>以下SQL查询显示了一个:term:<code>WKB</code>表示的示例（调用:command:<code>encode()</code>是为了将二进制输出转换为ASCII形式以便打印）:</p></blockquote><p><img src="'+h+`" alt="alt text"></p><p>由于WKT和WKB是在:term:<code>SFSQL</code>规范中定义的，它们不处理3维或4维几何图形。对于这些情况，PostGIS定义了扩展的常用文本（EWKT）和扩展的常用二进制（EWKB）格式。这些格式提供了与WKT和WKB相同的格式化功能，并添加了维度信息。</p><p>这是一个WKT中的三维线串示例:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ST_AsText<span class="token punctuation">(</span>ST_GeometryFromText<span class="token punctuation">(</span><span class="token string">&#39;LINESTRING(0 0 0,1 0 0,1 1 2)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+S+`" alt="alt text"></p><p>请注意，文本表示发生了变化！这是因为PostGIS的文本输入程序在接受输入时很宽容。它将接受</p><ul><li>十六进制编码的EWKB，</li><li>扩展的常用文本，</li><li>ISO标准的常用文本。</li></ul><p>在输出方面，:command:<code>ST_AsText</code>函数是保守的，并且只输出ISO标准的常用文本。</p><p>除了:command:<code>ST_GeometryFromText</code>函数之外，还有许多其他方法可以从常用文本或类似格式的输入创建几何图形:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- Using ST_GeomFromText with the SRID parameter</span>
<span class="token keyword">SELECT</span> ST_GeomFromText<span class="token punctuation">(</span><span class="token string">&#39;POINT(2 2)&#39;</span><span class="token punctuation">,</span><span class="token number">4326</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- Using ST_GeomFromText without the SRID parameter</span>
<span class="token keyword">SELECT</span> ST_SetSRID<span class="token punctuation">(</span>ST_GeomFromText<span class="token punctuation">(</span><span class="token string">&#39;POINT(2 2)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4326</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- Using a ST_Make* function</span>
<span class="token keyword">SELECT</span> ST_SetSRID<span class="token punctuation">(</span>ST_MakePoint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4326</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- Using PostgreSQL casting syntax and ISO WKT</span>
<span class="token keyword">SELECT</span> ST_SetSRID<span class="token punctuation">(</span><span class="token string">&#39;POINT(2 2)&#39;</span>::<span class="token keyword">geometry</span><span class="token punctuation">,</span> <span class="token number">4326</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- Using PostgreSQL casting syntax and extended WKT</span>
<span class="token keyword">SELECT</span> <span class="token string">&#39;SRID=4326;POINT(2 2)&#39;</span>::<span class="token keyword">geometry</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了各种形式的发射器（WKT、WKB、GML、KML、JSON、SVG）之外，PostGIS还具有四个消费者（WKT、WKB、GML、KML）。大多数应用程序使用WKT或WKB几何创建函数，但其他函数也可用。下面是一个消费GML并输出JSON的示例:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> ST_AsGeoJSON<span class="token punctuation">(</span>ST_GeomFromGML<span class="token punctuation">(</span><span class="token string">&#39;&lt;gml:Point&gt;&lt;gml:coordinates&gt;1,1&lt;/gml:coordinates&gt;&lt;/gml:Point&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+T+`" alt="alt text"></p><h2 id="_4-5-从文本中解析" tabindex="-1"><a class="header-anchor" href="#_4-5-从文本中解析" aria-hidden="true">#</a> 4.5. 从文本中解析</h2><p>到目前为止，我们看到的:term:<code>WKT</code>字符串都是&#39;text&#39;类型，我们已经使用PostGIS函数如:command:<code>ST_GeomFromText()</code>将它们转换为&#39;geometry&#39;类型。</p><p>PostgreSQL包含一种简短的语法，允许将数据从一种类型转换为另一种类型，即转换语法，oldata::newtype。</p><blockquote><p>示例: 这个SQL将一个双精度浮点数转换为文本字符串</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token number">0.9</span>::<span class="token keyword">text</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>示例: 这个SQL将一个:term:<code>WKT</code>字符串转换为几何图形</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;POINT(0 0)&#39;</span>::<span class="token keyword">geometry</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用转换创建几何图形时需要注意的一点是：除非您指定SRID，否则您将获得一个具有未知SRID的几何图形。</p><blockquote><p>示例: 可以使用&quot;扩展&quot;的常用文本形式指定SRID，该形式在前面包含一个SRID块:</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token string">&#39;SRID=4326;POINT(0 0)&#39;</span>::<span class="token keyword">geometry</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在处理:term:WKT、geometry<code>和</code>geography<code>列（参见:ref:</code>geography）时，使用转换符号是非常常见的。</p><h2 id="_4-6-函数列表" tabindex="-1"><a class="header-anchor" href="#_4-6-函数列表" aria-hidden="true">#</a> 4.6. 函数列表</h2>`,26),D={href:"http://postgis.net/docs/ST_Area.html",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://postgis.net/docs/ST_AsText.html",target:"_blank",rel:"noopener noreferrer"},U={href:"http://postgis.net/docs/ST_AsBinary.html",target:"_blank",rel:"noopener noreferrer"},H={href:"http://postgis.net/docs/ST_EndPoint.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://postgis.net/docs/ST_AsEWKB.html",target:"_blank",rel:"noopener noreferrer"},z={href:"http://postgis.net/docs/ST_AsEWKT.html",target:"_blank",rel:"noopener noreferrer"},V={href:"http://postgis.net/docs/ST_AsGeoJSON.html",target:"_blank",rel:"noopener noreferrer"},J={href:"http://postgis.net/docs/ST_AsGML.html",target:"_blank",rel:"noopener noreferrer"},X={href:"http://postgis.net/docs/ST_AsKML.html",target:"_blank",rel:"noopener noreferrer"},j={href:"http://postgis.net/docs/ST_AsSVG.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"http://postgis.net/docs/ST_ExteriorRing.html",target:"_blank",rel:"noopener noreferrer"},$={href:"http://postgis.net/docs/ST_GeometryN.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"http://postgis.net/docs/ST_GeomFromGML.html",target:"_blank",rel:"noopener noreferrer"},sn={href:"http://postgis.net/docs/ST_GeomFromKML.html",target:"_blank",rel:"noopener noreferrer"},en={href:"http://postgis.net/docs/ST_GeomFromText.html",target:"_blank",rel:"noopener noreferrer"},tn={href:"http://postgis.net/docs/ST_GeomFromWKB.html",target:"_blank",rel:"noopener noreferrer"},an={href:"http://postgis.net/docs/ST_GeometryType.html",target:"_blank",rel:"noopener noreferrer"},on={href:"http://postgis.net/docs/ST_InteriorRingN.html",target:"_blank",rel:"noopener noreferrer"},ln={href:"http://postgis.net/docs/ST_Length.html",target:"_blank",rel:"noopener noreferrer"},rn={href:"http://postgis.net/docs/ST_NDims.html",target:"_blank",rel:"noopener noreferrer"},pn={href:"http://postgis.net/docs/ST_NPoints.html",target:"_blank",rel:"noopener noreferrer"},cn={href:"http://postgis.net/docs/ST_NRings.html",target:"_blank",rel:"noopener noreferrer"},un={href:"http://postgis.net/docs/ST_NumGeometries.html",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://postgis.net/docs/ST_Perimeter.html",target:"_blank",rel:"noopener noreferrer"},gn={href:"http://postgis.net/docs/ST_SRID.html",target:"_blank",rel:"noopener noreferrer"},mn={href:"http://postgis.net/docs/ST_StartPoint.html",target:"_blank",rel:"noopener noreferrer"},_n={href:"http://postgis.net/docs/ST_X.html",target:"_blank",rel:"noopener noreferrer"},kn={href:"http://postgis.net/docs/ST_Y.html",target:"_blank",rel:"noopener noreferrer"};function hn(Sn,Tn){const e=l("ExternalLinkIcon");return r(),p("div",null,[v,n("p",null,[s("根据Simple Features for SQL ("),n("a",y,[s("SFSQL"),t(e)]),s(")规范，PostGIS提供了两个表来跟踪和报告给定数据库中可用的几何类型。")]),L,n("p",null,[s("Simple Features for SQL ("),n("a",f,[s("SFSQL"),t(e)]),s(") 规范，是 PostGIS 开发的原始指导标准，定义了如何表示现实世界的对象。通过以固定分辨率对连续形状进行数字化，我们可以获得对象的可通过的表示。SFSQL 只处理二维表示。PostGIS 已将其扩展到包括三维和四维表示；最近 SQL-Multimedia Part 3 ("),n("a",G,[s("SQL/MM"),t(e)]),s(") 规范已正式定义了他们自己的表示。")]),E,n("ul",null,[n("li",null,[s("Well-known text ("),n("a",x,[s("WKT"),t(e)]),s(") "),I]),n("li",null,[s("Well-known binary ("),n("a",N,[s("WKB"),t(e)]),s(") "),q]),n("li",null,[s("Geographic Mark-up Language ("),n("a",w,[s("GML"),t(e)]),s(") "),P]),n("li",null,[s("Keyhole Mark-up Language ("),n("a",K,[s("KML"),t(e)]),s(") "),M]),n("li",null,[n("a",R,[s("GeoJSON"),t(e)]),W]),n("li",null,[s("可伸缩矢量图形 ("),n("a",O,[s("SVG"),t(e)]),s(") "),A])]),F,n("p",null,[s("请注意，除了具有几何表示的文本参数外，我们还有一个提供几何图形的 "),n("a",C,[s("SRID"),t(e)]),s(" 的数字参数。")]),B,n("p",null,[n("a",D,[s("ST_Area"),t(e)]),s(": 如果几何对象是多边形或多面体，则返回其表面积。对于“geometry”类型，面积以SRID单位表示。对于“geography”类型，面积以平方米表示。")]),n("p",null,[n("a",Q,[s("ST_AsText"),t(e)]),s(": 返回几何/地理对象的不带SRID元数据的Well-Known Text（WKT）表示。")]),n("p",null,[n("a",U,[s("ST_AsBinary"),t(e)]),s(": 返回几何/地理对象的不带SRID元数据的Well-Known Binary（WKB）表示。")]),n("p",null,[n("a",H,[s("ST_EndPoint"),t(e)]),s(": 返回一个 LINESTRING 几何对象的最后一个点，作为一个 POINT。")]),n("p",null,[n("a",Y,[s("ST_AsEWKB"),t(e)]),s(": 返回具有SRID元数据的几何对象的Well-Known Binary（WKB）表示。")]),n("p",null,[n("a",z,[s("ST_AsEWKT"),t(e)]),s(": 返回具有SRID元数据的几何对象的Well-Known Text（WKT）表示。")]),n("p",null,[n("a",V,[s("ST_AsGeoJSON"),t(e)]),s(": 将几何对象返回为一个 GeoJSON 元素。")]),n("p",null,[n("a",J,[s("ST_AsGML"),t(e)]),s(": 将几何对象返回为一个 GML 版本 2 或 3 元素。")]),n("p",null,[n("a",X,[s("ST_AsKML"),t(e)]),s(": 将几何对象返回为一个 KML 元素。有几种变体。默认版本为2，默认精度为15。")]),n("p",null,[n("a",j,[s("ST_AsSVG"),t(e)]),s(": 给定几何或地理对象，返回 SVG 路径数据中的几何。")]),n("p",null,[n("a",Z,[s("ST_ExteriorRing"),t(e)]),s(": 返回表示多边形几何的外部环的线串。如果几何对象不是多边形，则返回NULL。不适用于MULTIPOLYGON")]),n("p",null,[n("a",$,[s("ST_GeometryN"),t(e)]),s(": 如果几何对象是GEOMETRYCOLLECTION、MULTIPOINT、MULTILINESTRING、MULTICURVE或MULTIPOLYGON，则返回基于1的第N个几何对象。否则，返回NULL。")]),n("p",null,[n("a",nn,[s("ST_GeomFromGML"),t(e)]),s("：输入 GML，并输出为 PostGIS 的几何对象。")]),n("p",null,[n("a",sn,[s("ST_GeomFromKML"),t(e)]),s(": 接受几何的 KML 表示形式，并输出一个 PostGIS 几何对象")]),n("p",null,[n("a",en,[s("ST_GeomFromText"),t(e)]),s(": 从 Well-Known Text 表示（WKT）中返回指定的 ST_Geometry 值。")]),n("p",null,[n("a",tn,[s("ST_GeomFromWKB"),t(e)]),s(": 从 Well-Known Binary 几何表示（WKB）和可选 SRID 创建一个几何实例。")]),n("p",null,[n("a",an,[s("ST_GeometryType"),t(e)]),s(": 返回 ST_Geometry 值的几何类型。")]),n("p",null,[n("a",on,[s("ST_InteriorRingN"),t(e)]),s(": 返回多边形几何体的第 N 个内环线串。如果几何体不是多边形或给定的 N 超出范围，则返回 NULL。")]),n("p",null,[n("a",ln,[s("ST_Length"),t(e)]),s(": 如果几何体是线串或多线串，则返回其二维长度。几何体的单位是空间参考单位，地理学的单位是米（默认椭球体）")]),n("p",null,[n("a",rn,[s("ST_NDims"),t(e)]),s(": 返回几何体的坐标维数，作为一个小整数。可能的值为：2、3或4。")]),n("p",null,[n("a",pn,[s("ST_NPoints"),t(e)]),s(": 返回几何体中点（顶点）的数量。")]),n("p",null,[n("a",cn,[s("ST_NRings"),t(e)]),s(": 如果几何体是多边形或多部分多边形，则返回环的数量。")]),n("p",null,[n("a",un,[s("ST_NumGeometries"),t(e)]),s(": 如果几何体是 GEOMETRYCOLLECTION（或 MULTI*），则返回几何体的数量，否则返回 NULL。")]),n("p",null,[n("a",dn,[s("ST_Perimeter"),t(e)]),s(": 返回 ST_Surface 或 ST_MultiSurface 值的边界的长度测量。（多边形，多多边形）")]),n("p",null,[n("a",gn,[s("ST_SRID"),t(e)]),s(": 返回 ST_Geometry 的空间参考标识符，如在 spatial_ref_sys 表中定义。")]),n("p",null,[n("a",mn,[s("ST_StartPoint"),t(e)]),s(": 返回线串几何图形的第一个点作为一个点。")]),n("p",null,[n("a",_n,[s("ST_X"),t(e)]),s(": 返回点的 X 坐标，如果不可用则返回 NULL。输入必须是一个点。")]),n("p",null,[n("a",kn,[s("ST_Y"),t(e)]),s(": 返回点的 Y 坐标，如果不可用则返回 NULL。输入必须是一个点。")])])}const vn=o(b,[["render",hn],["__file","PostGIS-4.html.vue"]]);export{vn as default};
