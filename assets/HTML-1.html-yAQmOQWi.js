import{_ as n,r as l,o,c as i,d as e,e as t,f as m,b as s}from"./app-zVI8MIRp.js";const r="/vuepress-blog/assets/image1-YI9hePBV.png",p="/vuepress-blog/assets/image2-i6DCmX52.png",d="/vuepress-blog/assets/image3-iob9r4sf.png",c="/vuepress-blog/assets/image4-OTCeURft.png",h={},u=s(`<h2 id="经典真题" tabindex="-1"><a class="header-anchor" href="#经典真题" aria-hidden="true">#</a> 经典真题</h2><ul><li>什么是<code>&lt;!DOCTYPE&gt;</code>? 是否需要在<em>HTML5</em>中使用?</li><li>什么是严格模式与混杂模式?</li><li>列举几条怪异模式中的怪癖行为</li></ul><h2 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念" aria-hidden="true">#</a> 1.1. 概念</h2><p><em>HTML</em>文档通常以<strong>文档声明</strong>开始，该声明的作用是<strong>帮助浏览器确定其解析和显示的<em>HTML</em>文档类型</strong>。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>文档声明必须在第一行、且顶格显示</li><li>大小写不敏感</li></ul><p>如果有内容放在其前面，比如批注、<em>XML</em>声明等，会令<em>IE9</em>或者更早期的浏览器触发<strong>怪异模式</strong>（混杂模式）</p><p>文档声明并非一个<em>HTML</em>标签。它是一个&quot;信息&quot;，告诉浏览器期望的文档类型。</p><h3 id="_1-1-1-html发展历史" tabindex="-1"><a class="header-anchor" href="#_1-1-1-html发展历史" aria-hidden="true">#</a> 1.1.1. <em>HTML</em>发展历史</h3><p><img src="`+r+'" alt="HTML版本历史"></p><p><img src="'+p+'" alt="HTML版本历史"></p><p>不同版本之间最显著的区别：<strong>支持的<em>HTML</em>元素不同</strong></p>',12),g=e("em",null,"HTML",-1),T={href:"https://www.w3school.com.cn/tags/html_ref_dtd.asp",target:"_blank",rel:"noopener noreferrer"},_=s(`<h3 id="_1-1-2-不同版本html的文档声明" tabindex="-1"><a class="header-anchor" href="#_1-1-2-不同版本html的文档声明" aria-hidden="true">#</a> 1.1.2. 不同版本<em>HTML</em>的文档声明</h3><h4 id="_1-1-2-1-最新的html5" tabindex="-1"><a class="header-anchor" href="#_1-1-2-1-最新的html5" aria-hidden="true">#</a> 1.1.2.1. 最新的<em>HTML5</em></h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-1-2-2-html-4-01-strict" tabindex="-1"><a class="header-anchor" href="#_1-1-2-2-html-4-01-strict" aria-hidden="true">#</a> 1.1.2.2. <em>HTML 4.01 Strict</em></h4><p>该 <em>DTD</em> 包含所有 <em>HTML</em> 元素和属性，但不包括展示性的和弃用的元素（比如 <em>font</em>）。不允许框架集（<em>Framesets</em>）。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/strict.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_1-1-2-3-html-4-01-transitional" tabindex="-1"><a class="header-anchor" href="#_1-1-2-3-html-4-01-transitional" aria-hidden="true">#</a> 1.1.2.3. <strong><em>HTML 4.01 Transitional</em></strong></h4><p>该 <em>DTD</em> 包含所有的 <em>HTML</em> 元素和属性，包括展示性的和弃用的元素（比如 <em>font</em>）。不允许框架集（<em>Framesets</em>）。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,9),M=e("em",null,"HTML5",-1),L=e("em",null,"DTD",-1),D=e("em",null,"DTD",-1),k={href:"https://www.w3school.com.cn/tags/tag_doctype.asp",target:"_blank",rel:"noopener noreferrer"},b=s('<h3 id="_1-1-3-dtd-sgml" tabindex="-1"><a class="header-anchor" href="#_1-1-3-dtd-sgml" aria-hidden="true">#</a> 1.1.3. <em>DTD</em> &amp; <em>SGML</em></h3><p>早期的版本中，比如 <em>HTML 4.01</em>，声明之所以要引用 <em>DTD</em>，是因为 <em>HTML 4.01</em> 基于 <em>SGML</em>。而 <em>DTD</em> 规定的是标记语言的规则，这样浏览器才能正确地呈现内容。 最新的 <em>HTML5</em> 不基于 <em>SGML</em>，所以不需要引用 <em>DTD</em>。</p><p>&quot;<em>ML</em>&quot; 即 &quot;<em>Markup language</em> (置标语言、标记语言)&quot;，是用标准的标记来解释纯文本文档的内容，从而提供关于文档结构或文档该如何渲染的信息。其发展如下：</p><p><img src="'+d+'" alt="ML 发展"></p><p><em>GML</em> 是第一代置标语言，使文档能明确将标示和内容分开，所有文件使用同样的标识方法。</p><p><em>SGML</em> 在 <em>GML</em> 的基础上进行整理，形成了一套非常严谨的文件描述方法。它的组成包括语法定义、<strong><em>DTD</em></strong>、文件实例三部分。<em>SGML</em> 因太严谨，规范达 <em>500</em> 多页，故而不易学、不易用、难以实现，所以在它的基础上又发展了其他的更易用的置标语言。</p><p><em>HTML</em> 抛弃了 <em>SGML</em> 复杂庞大的缺点，继承了 <em>SGML</em> 的很多优点。<em>HTML</em> 最大的特点是简单性和跨平台性。它只使用了 <em>SGML</em> 中很少的一部分标记。为了便于在计算机上实现，<em>HTML</em> 规定的标记是固定的，即 <strong><em>HTML</em> 语法是不可扩展的</strong>。</p><p>随着 <em>Web</em> 应用的不断发展，<em>HTML</em> 的局限性也越来越明显，如 <em>HTML</em> 无法描述数据、可读性差、搜索时间长等。人们又把目光转向 <em>SGML</em>，再次改造 <em>SGML</em> 使之适应现在的网络需求。<em>1998</em> 年 <em>2</em> 月 <em>10</em> 日，<em>W3C</em> 公布 <strong><em>XML 1.0</em></strong> 标准。很长一段时间，<strong><em>XML</em> 都作为网络传输的标准数据格式</strong>。</p><p><em>XHTML</em> 的出现是因为当时的 <em>HTML</em> 语法要求比较松散，这样对于网页编写者来说，比较方便，但对于机器来说，语言的语法越松散，处理起来就越困难，对于传统的计算机来说，还有能力兼容松散语法，但对于许多其他设备，比如手机，难度就比较大。因此产生了由 <em>DTD</em> 定义规则，<strong>语法要求更加严格的 <em>XHTML</em></strong>。</p>',9),H=e("em",null,"DTD",-1),C={href:"https://www.w3school.com.cn/dtd/index.asp",target:"_blank",rel:"noopener noreferrer"},f=e("em",null,"DTD",-1),v=s('<p>最终，<em>HTML5</em> 是 <em>HTML</em> 的第五个修订版，该版本不再基于 <em>SGML</em> 了，所以也就不再引入 <em>DTD</em> 声明了。 <em>HTML5</em> 的出现，其主要的目标是将互联网语义化，以便更好地被人类和机器阅读，并同时提供更好地支持各种媒体的嵌入。</p><h2 id="_1-2-渲染模式" tabindex="-1"><a class="header-anchor" href="#_1-2-渲染模式" aria-hidden="true">#</a> 1.2. 渲染模式</h2><h3 id="_1-2-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-2-1-概念" aria-hidden="true">#</a> 1.2.1. 概念</h3><p>浏览器的渲染模式分为三种：</p><ul><li>怪癖模式（混杂模式）[<em>Quirks mode</em>]</li><li>严格模式（标准模式）[<em>Standars mode</em>]</li><li>几乎标准模式 [<em>Almost standars mode</em>]</li></ul><p>在 <em>JavaScript</em> 中，可以通过 <code>document.compatMode</code> 来获取当前浏览器的渲染模式，返回值如下：</p><ul><li><code>BackCompat</code>：文档处于怪异模式</li><li><code>CSS1Compat</code>：非怪异模式</li></ul><blockquote><p>之所以出现不同的渲染模式，是由于历史原因造成的。</p><p>当年 Netscape4（网景公司早期的浏览器）和 IE4（微软公司早期的浏览器）实现 CSS 机制时，没有遵循 W3C 提出的标准。Netscape4 提供了糟糕的支持，而 IE4 虽然接近标准，但依旧未能完全正确的支持标准。</p><p>所以，在 W3C 标准推出以前，浏览器在对页面的渲染上没有统一规范，产生了差异（Quirks mode 或者称为 Compatibility Mode）</p><p>为了保障自己的网站在各个浏览器上显示正确，网页开发者们不得不依据各个浏览器自身的规范来使用 CSS，因此大部分网站的 CSS 实现并不符合 W3C 规范的标准。</p><p>W3C 标准推出后，浏览器渲染页面有了统一的标准（Strict mode 也有叫做 Standars mode）浏览器都开始采纳新标准，但存在一个问题就是如何保证旧的网页还能继续浏览，在标准出来以前，很多页面都是根据旧的渲染方法编写的，如果用的标准来渲染，将导致页面显示异常。</p><p>为保持浏览器渲染的兼容性，使以前的页面能够正常浏览，浏览器都保留了旧的渲染方法（如：微软的 IE）。这样浏览器渲染上就产生了 Quircks mode 和 Standars mode，两种渲染方法共存在一个浏览器上。混杂模式服务于旧式规则，而严格模式服务于标准规则。</p></blockquote><p>对于 <em>HTML</em> 文档来说，浏览器使用文档开头的 <em>DOCTYPE</em> 来决定用混杂模式或标准模式处理。</p><p>如果文档中没有 <em>DOCTYPE</em>，将触发文档的怪异模式。怪异模式最明显的影响是会触发怪异盒模型。</p><p>在 <em>DOCTYPE</em> 声明中，没有使用 <em>DTD</em> 声明或者使用 <em>HTML4</em> 以下的 <em>DTD</em> 声明时，基本所有的浏览器都是使用 <em>Quirks mode</em> 呈现，其他的则使用 <em>Standars mode</em> 解析。</p><h3 id="_1-2-2-标准模式和混杂模式的渲染区别" tabindex="-1"><a class="header-anchor" href="#_1-2-2-标准模式和混杂模式的渲染区别" aria-hidden="true">#</a> 1.2.2. 标准模式和混杂模式的渲染区别</h3><ol><li><p>盒模型的高宽包含 <em>padding</em> 和 <em>border</em></p><p><img src="'+c+'" alt="盒模型"></p><p>在 <em>W3C</em> 标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，而在 <em>IE5.5</em> 及以下的浏览器及其他版本的 <em>Quirks</em> 模式下，<em>IE</em> 的宽度和高度还包含了 <em>padding</em> 和 <em>border</em>。</p></li><li><p>可以设置行内元素的宽高 在 <em>Standars</em> 模式下，给 <em>span</em> 等行内元素设置 <em>width</em> 和 <em>height</em> 都不会生效，而在 <em>Quirks</em> 模式下，则会生效。</p></li><li><p><em>Quirks</em> 模式下设置图片的 <em>padding</em> 会失效。</p></li><li><p><em>Quirks</em> 模式下 <em>Table</em> 中的字体属性不能继承上层的设置。</p></li><li><p><em>Quirks</em> 模式下 <em>white-space: pre</em> 会失效。</p></li></ol>',13),S=e("em",null,"MDN",-1),E={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode",target:"_blank",rel:"noopener noreferrer"},w=e("em",null,"MDN",-1),x={href:"https://hsivonen.fi/doctype/",target:"_blank",rel:"noopener noreferrer"},q=s('<h2 id="真题解答" tabindex="-1"><a class="header-anchor" href="#真题解答" aria-hidden="true">#</a> 真题解答</h2><ul><li><p>什么是<code>&lt;!DOCTYPE&gt;</code>? 是否需要在 <em>HTML5</em> 中使用?</p><p>它是 <em>HTML</em> 的文档声明，通过它告诉浏览器，使用哪一个 <em>HTML</em> 版本标准解析文档。</p><p>在浏览器发展的历史中，<em>HTML</em> 出现过很多个版本，不同版本在元素、属性等书写格式上略有差异，如果不预先告诉浏览器，浏览器就不知道我们的文档标准是什么，在这种情况下，大部分浏览器将开启最大兼容模式来解析网页，我们称之为怪异模式。这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的 <em>bug</em>，所以文档声明是必须的。</p><p>而文档声明有多种书写格式，对应不同的 <em>HTML</em> 版本，<code>&lt;!DOCTYPE&gt;</code>这种书写是告诉浏览器，整个文档使用 <em>HTML5</em> 的标准进行解析。</p></li><li><p>什么是严格模式与混杂模式?</p><ul><li><strong>严格模式</strong>：又称标准模式，是指浏览器按照 <em>W3C</em> 标准解析代码。</li><li><strong>混杂模式</strong>：又称怪异模式或兼容模式，是指浏览器按照自己的方式解析代码。</li><li><strong>如何区分</strong>：浏览器解析时到底使用严格模式还是混杂模式，与网页中的 <em>DTD</em> 直接相关。 <ol><li>如果文档包含严格的 <em>DOCTYPE</em>，那么它一般以严格模式呈现。</li><li>包含过渡 <em>DTD</em> 和 <em>URI</em> 的 <em>DOCTYPE</em>，也以严格模式呈现，但有过渡 <em>DTD</em> 而没有 <em>URI</em> （统一资源标识符，就是声明最后的地址）会导致页面以混杂模式呈现。</li><li><em>DOCTYPE</em> 不存在或形式不正确，会导致文档以混杂模式呈现。</li><li><em>HTML5</em> 没有 <em>DTD</em>，因此也就没有严格模式与混杂模式的区别，<em>HTML5</em> 有相对宽松的语法，实现时，已经尽可能大的实现了向后兼容。</li></ol></li><li><strong>意义</strong>：严格模式与混杂模式存在的意义与其来源密切相关，如果说只存在严格模式，那么许多旧网站必然受到影响，如果只存在混杂模式，那么会回到当时浏览器大战时的混乱，每个浏览器都有自己的解析模式。</li></ul></li><li><p>列举几条怪异模式中的怪癖行为</p><ul><li>宽高的算法与 <em>W3C</em> 盒模型不同</li><li>在表格中的字体样式不会继承</li><li>怪异模式下可以设置行内元素宽高</li><li>怪异模式下 <em>white-space: pre</em> 会失效</li></ul></li></ul>',2);function P(O,Y){const a=l("ExternalLinkIcon");return o(),i("div",null,[u,e("blockquote",null,[e("p",null,[t("具体支持的"),g,t("元素可以参阅："),e("a",T,[t("不同 DOCTYPE 中的有效 HTML 元素"),m(a)])])]),_,e("blockquote",null,[e("p",null,[t("上述不同版本的文档声明，"),M,t(" 不需要引入 "),L,t(" 文件，而其他类型的文档声明是需要引入 "),D,t(" 的。 更多的可参考："),e("a",k,[t("HTML <!DOCTYPE> 声明"),m(a)])])]),b,e("blockquote",null,[e("p",null,[H,t(" 教程可参阅："),e("a",C,[f,t(" 教程"),m(a)])])]),v,e("blockquote",null,[e("p",null,[t("更多可以参阅 "),S,t(" 上的解释："),e("a",E,[t("怪异模式和标准模式"),m(a)])])]),e("blockquote",null,[e("p",null,[w,t(" 上给出了不同模式在不同浏览器下的渲染区别（英文）："),e("a",x,[t("Activating Browser Modes with Doctype"),m(a)])])]),q])}const I=n(h,[["render",P],["__file","HTML-1.html.vue"]]);export{I as default};
