import{_ as o,r,o as m,c as n,d as e,e as l,f as a,b as t}from"./app-zVI8MIRp.js";const s="/vuepress-blog/assets/image1-gk7voSr7.png",c={},d=t('<h2 id="经典真题" tabindex="-1"><a class="header-anchor" href="#经典真题" aria-hidden="true">#</a> 经典真题</h2><ul><li>说说对 <em>html</em> 语义化的理解</li></ul><h2 id="_1-什么是语义元素" tabindex="-1"><a class="header-anchor" href="#_1-什么是语义元素" aria-hidden="true">#</a> 1. 什么是语义元素?</h2><p>语义是指对一个词或句子含义的正确解释。很多 <em>HTML</em> 标签也具有语义的意义，也就是元素本身传达了关于标签所包含内容类型的一些信息。例如，当浏览器解析到 <code>&lt;h1&gt;&lt;/h1&gt;</code> 标签时，它将该标签解释为包含这一块内容的最重要的标题。<em>h1</em> 标签的语义就是用它来标识特定网页或部分最重要的标题。</p><h2 id="_2-为什么要语义化" tabindex="-1"><a class="header-anchor" href="#_2-为什么要语义化" aria-hidden="true">#</a> 2. 为什么要语义化?</h2><ul><li>代码结构：使页面没有 <em>css</em> 的情况下，也能够呈现出很好的内容结构</li><li><strong>有利于 <em>SEO</em></strong>：爬虫依赖标签来确定关键字的权重，因此可以和搜索引擎建立良好的沟通，帮助爬虫抓取更多的有效信息</li><li>提升用户体验：例如 <em>title</em>、<em>alt</em> 可以用于解释名称或者解释图片信息，以及 <em>label</em> 标签的灵活运用</li><li>便于团队开发和维护：语义化使得代码更具有可读性，让其他开发人员更加理解你的 <em>html</em> 结构，减少差异化</li><li><strong>方便其他设备解析</strong>：如屏幕阅读器、盲人阅读器、移动设备等，以有意义的方式来渲染网页</li></ul><h2 id="_3-html5-常用的语义元素" tabindex="-1"><a class="header-anchor" href="#_3-html5-常用的语义元素" aria-hidden="true">#</a> 3. <em>HTML5</em> 常用的语义元素</h2><p><em>HTML5</em> 提供了新的语义元素来定义网页的不同部分，它们被称为&quot;切片元素&quot;，如下：</p><p><img src="'+s+'" alt="HTML5 语义元素"></p><ul><li>header：用于定义页面的头部区域，通常包括网站 logo、主导航、全站链接以及搜索框。</li><li>nav：定义页面的导航链接部分区域。</li><li>main：定义文档的主要内容，<strong>该内容在文档中应当是独一无二的</strong></li><li>article：定义页面独立的内容，它可以有自己的 header、footer、sections 等，专注于单个主题的博客文章，报纸文章或网页文章。</li><li>section：表示文档中的一个区域（或节），比如，内容中的一个专题组。</li><li>aside：表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分且可以被单独的拆分出来而不会影响整体。通常表现为侧边栏或嵌入内容。</li><li>footer：定义最近一个章节内容或者根节点元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。</li></ul><p>大约有 100 多个 HTML 语义元素可供选择</p>',11),h={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element",target:"_blank",rel:"noopener noreferrer"},p=t('<h2 id="_4-无障碍网页" tabindex="-1"><a class="header-anchor" href="#_4-无障碍网页" aria-hidden="true">#</a> 4. 无障碍网页</h2><p><em>W3C</em> 在 <em>1997</em> 年发起了一项 <em>WAI（Web Accessibility Initiative）</em> 的计划，该计划的目标是提升网站的易用性(<em>accessibility</em>)，而其中有一个很重要的指标，那就是能够被残障人士使用的网站才能称得上一个易用的（易访问的）网站。</p><p><strong>HTML5 在无障碍方面进行了加强，加入了无障碍属性。</strong></p><p>所谓 <em>HTML5</em> 无障碍属性，主要针对的是视觉缺陷，失聪，行动不便的残疾人以及假装残疾的测试人员。尤其像盲人，眼睛看不到，其浏览网页则需要借助辅助设备，如屏幕阅读器，屏幕阅读机可以大声朗读或者输出盲文。</p><p>而 <em>HTML5</em> 无障碍属性就是可以让屏幕阅读器准确识别网页中的内容，变化，状态的技术规范，可以让盲人这类用户也能无障碍阅读！</p>',5),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/Accessibility",target:"_blank",rel:"noopener noreferrer"},_=t("<p><strong>常见的无障碍属性</strong></p><p><em>WAI-ARIA</em> 是 <em>W3C</em> 编写的规范，定义了一组可用于其他元素的 <em>HTML</em> 特性，用于提供额外的语义化以及改善缺乏的可访问性。以下是规范中三个主要的特性：</p><ul><li><p>角色：这定义了元素是干什么的。许多「标志性的角色」，其实重复了 <em>HTML5</em> 的结构元素的语义价值。例如 <em>role=&quot;navigation&quot; (nav)</em> 或者 <em>role=&quot;complementary&quot; (aside)</em>。</p></li><li><p>属性：我们能通过定义一些属性给元素，让他们具备更多的语义。例如：<em>aria-required=&quot;true&quot;</em> 意味着元素在表单上是必填的。然而 <em>aria-labelledby=&quot;label&quot;</em> 允许在元素上设置一个 <em>ID</em>，用于 <em>labelledby</em> 引用作为屏幕阅读器指定的 <em>label</em> 内容 ，多个也可以。</p></li><li><p>状态：用于表达元素当前的条件的特殊属性，例如 <em>aria-disabled=&quot;true&quot;</em>，屏幕阅读器就会这个表单禁止输入。状态和属性的差异之处就是：属性在应用的生命周期中不会改变，而状态可以，通常我们用编程的方法改变它，例如 <em>Javascript</em>。</p></li></ul><p>关于 <em>WAI-ARIA</em> 属性重要的一点是它不会对 <em>Web</em> 页面有任何影响，除了让更多的信息从浏览器暴露给 <em>accessibility APIs (无障碍 API)</em>，这也是屏幕阅读器这一类软件的信息源。<em>WAI-ARIA</em> 不会影响网页的结构，以及 <em>DOM</em> 等等，尽管这些属性可用于作为 <em>CSS</em> 选择器。</p>",4),b={href:"https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Accessibility/WAI-ARIA_basics",target:"_blank",rel:"noopener noreferrer"},g=e("em",null,"WAI-ARIA",-1),f=t('<h2 id="真题解答" tabindex="-1"><a class="header-anchor" href="#真题解答" aria-hidden="true">#</a> 真题解答</h2><ul><li>说说对 <em>html</em> 语义化的理解 语义化的目的主要有以下几点： <ol><li>去掉或者丢失样式的时候能够让页面呈现出清晰的结构</li><li>有利于 <em>SEO</em>：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息（爬虫依赖于标签来确定上下文和各个关键字的权重）</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以有意义的方式来渲染网页</li><li>便于团队开发和维护，语义化更具可读性，遵循 <em>W3C</em> 标准的团队都遵循这个标准，可以减少差异化。<em>HTML5</em> 中新增加的很多标签，例如：<em>arctilce</em>、<em>nav</em>、<em>header</em> 和 <em>footer</em> 等，就是基于语义化设计原则。</li></ol></li></ul>',2);function A(L,I){const i=r("ExternalLinkIcon");return m(),n("div",null,[d,e("blockquote",null,[e("p",null,[l("更多的语义化标签可以参阅："),e("a",h,[l("HTML 元素参考"),a(i)])])]),p,e("blockquote",null,[e("p",null,[l("关于无障碍的更多说明，参阅："),e("a",u,[l("无障碍"),a(i)])])]),_,e("blockquote",null,[e("p",null,[l("更多无障碍属性，参阅："),e("a",b,[g,l(" 基础"),a(i)])])]),f])}const M=o(c,[["render",A],["__file","HTML-2.html.vue"]]);export{M as default};
